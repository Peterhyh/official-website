const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

//Get port from environment and store in Express:
const port = normalizePort(process.env.PORT || '443');
app.set('port', port);


// Obtaining the certificate and private key:
const options = {
  key: fs.readFileSync(__dirname + '/server.key'),
  cert: fs.readFileSync(__dirname + '/server.cert')
}
// Use the option above to configure server:
const secureServer = https.createServer(options, app);
// Listening to secure server:
secureServer.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});
secureServer.on('error', onError);
secureServer.on('listening', onListening);


// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


//Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


//Event listener for HTTPS secureServer "listening" event.
function onListening() {
  var addr = secureServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
